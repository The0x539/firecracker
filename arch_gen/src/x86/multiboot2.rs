/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const MULTIBOOT_HEADER: u32 = 1;
pub const MULTIBOOT_SEARCH: u32 = 32768;
pub const MULTIBOOT_HEADER_ALIGN: u32 = 8;
pub const MULTIBOOT2_HEADER_MAGIC: u32 = 3897708758;
pub const MULTIBOOT2_BOOTLOADER_MAGIC: u32 = 920085129;
pub const MULTIBOOT_MOD_ALIGN: u32 = 4096;
pub const MULTIBOOT_INFO_ALIGN: u32 = 8;
pub const MULTIBOOT_TAG_ALIGN: u32 = 8;
pub const MULTIBOOT_TAG_TYPE_END: u32 = 0;
pub const MULTIBOOT_TAG_TYPE_CMDLINE: u32 = 1;
pub const MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME: u32 = 2;
pub const MULTIBOOT_TAG_TYPE_MODULE: u32 = 3;
pub const MULTIBOOT_TAG_TYPE_BASIC_MEMINFO: u32 = 4;
pub const MULTIBOOT_TAG_TYPE_BOOTDEV: u32 = 5;
pub const MULTIBOOT_TAG_TYPE_MMAP: u32 = 6;
pub const MULTIBOOT_TAG_TYPE_VBE: u32 = 7;
pub const MULTIBOOT_TAG_TYPE_FRAMEBUFFER: u32 = 8;
pub const MULTIBOOT_TAG_TYPE_ELF_SECTIONS: u32 = 9;
pub const MULTIBOOT_TAG_TYPE_APM: u32 = 10;
pub const MULTIBOOT_TAG_TYPE_EFI32: u32 = 11;
pub const MULTIBOOT_TAG_TYPE_EFI64: u32 = 12;
pub const MULTIBOOT_TAG_TYPE_SMBIOS: u32 = 13;
pub const MULTIBOOT_TAG_TYPE_ACPI_OLD: u32 = 14;
pub const MULTIBOOT_TAG_TYPE_ACPI_NEW: u32 = 15;
pub const MULTIBOOT_TAG_TYPE_NETWORK: u32 = 16;
pub const MULTIBOOT_TAG_TYPE_EFI_MMAP: u32 = 17;
pub const MULTIBOOT_TAG_TYPE_EFI_BS: u32 = 18;
pub const MULTIBOOT_TAG_TYPE_EFI32_IH: u32 = 19;
pub const MULTIBOOT_TAG_TYPE_EFI64_IH: u32 = 20;
pub const MULTIBOOT_TAG_TYPE_LOAD_BASE_ADDR: u32 = 21;
pub const MULTIBOOT_HEADER_TAG_END: u32 = 0;
pub const MULTIBOOT_HEADER_TAG_INFORMATION_REQUEST: u32 = 1;
pub const MULTIBOOT_HEADER_TAG_ADDRESS: u32 = 2;
pub const MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS: u32 = 3;
pub const MULTIBOOT_HEADER_TAG_CONSOLE_FLAGS: u32 = 4;
pub const MULTIBOOT_HEADER_TAG_FRAMEBUFFER: u32 = 5;
pub const MULTIBOOT_HEADER_TAG_MODULE_ALIGN: u32 = 6;
pub const MULTIBOOT_HEADER_TAG_EFI_BS: u32 = 7;
pub const MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS_EFI32: u32 = 8;
pub const MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS_EFI64: u32 = 9;
pub const MULTIBOOT_HEADER_TAG_RELOCATABLE: u32 = 10;
pub const MULTIBOOT_ARCHITECTURE_I386: u32 = 0;
pub const MULTIBOOT_ARCHITECTURE_MIPS32: u32 = 4;
pub const MULTIBOOT_HEADER_TAG_OPTIONAL: u32 = 1;
pub const MULTIBOOT_LOAD_PREFERENCE_NONE: u32 = 0;
pub const MULTIBOOT_LOAD_PREFERENCE_LOW: u32 = 1;
pub const MULTIBOOT_LOAD_PREFERENCE_HIGH: u32 = 2;
pub const MULTIBOOT_CONSOLE_FLAGS_CONSOLE_REQUIRED: u32 = 1;
pub const MULTIBOOT_CONSOLE_FLAGS_EGA_TEXT_SUPPORTED: u32 = 2;
pub const MULTIBOOT_MEMORY_AVAILABLE: u32 = 1;
pub const MULTIBOOT_MEMORY_RESERVED: u32 = 2;
pub const MULTIBOOT_MEMORY_ACPI_RECLAIMABLE: u32 = 3;
pub const MULTIBOOT_MEMORY_NVS: u32 = 4;
pub const MULTIBOOT_MEMORY_BADRAM: u32 = 5;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED: u32 = 0;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_RGB: u32 = 1;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT: u32 = 2;
pub type multiboot_uint8_t = ::std::os::raw::c_uchar;
pub type multiboot_uint16_t = ::std::os::raw::c_ushort;
pub type multiboot_uint32_t = ::std::os::raw::c_uint;
pub type multiboot_uint64_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header {
    pub magic: multiboot_uint32_t,
    pub architecture: multiboot_uint32_t,
    pub header_length: multiboot_uint32_t,
    pub checksum: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_header() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_header>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_header))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_header>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_header>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_header>())).architecture as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(architecture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_header>())).header_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(header_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_header>())).checksum as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_header_tag() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_header_tag>(),
        8usize,
        concat!("Size of: ", stringify!(multiboot_header_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_header_tag>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_header_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_header_tag>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_header_tag>())).flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_header_tag>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_header_tag_information_request {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub requests: __IncompleteArrayField<multiboot_uint32_t>,
}
#[test]
fn bindgen_test_layout_multiboot_header_tag_information_request() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_header_tag_information_request>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(multiboot_header_tag_information_request)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_header_tag_information_request>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_header_tag_information_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_information_request>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_information_request),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_information_request>())).flags as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_information_request),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_information_request>())).size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_information_request),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_information_request>())).requests
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_information_request),
            "::",
            stringify!(requests)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_address {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub header_addr: multiboot_uint32_t,
    pub load_addr: multiboot_uint32_t,
    pub load_end_addr: multiboot_uint32_t,
    pub bss_end_addr: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_header_tag_address() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_header_tag_address>(),
        24usize,
        concat!("Size of: ", stringify!(multiboot_header_tag_address))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_header_tag_address>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_header_tag_address))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_address>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_address),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_address>())).flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_address),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_address>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_address),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_address>())).header_addr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_address),
            "::",
            stringify!(header_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_address>())).load_addr as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_address),
            "::",
            stringify!(load_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_address>())).load_end_addr as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_address),
            "::",
            stringify!(load_end_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_address>())).bss_end_addr as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_address),
            "::",
            stringify!(bss_end_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_entry_address {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub entry_addr: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_header_tag_entry_address() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_header_tag_entry_address>(),
        12usize,
        concat!("Size of: ", stringify!(multiboot_header_tag_entry_address))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_header_tag_entry_address>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_header_tag_entry_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_entry_address>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_entry_address),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_entry_address>())).flags as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_entry_address),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_entry_address>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_entry_address),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_entry_address>())).entry_addr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_entry_address),
            "::",
            stringify!(entry_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_console_flags {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub console_flags: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_header_tag_console_flags() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_header_tag_console_flags>(),
        12usize,
        concat!("Size of: ", stringify!(multiboot_header_tag_console_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_header_tag_console_flags>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_header_tag_console_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_console_flags>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_console_flags),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_console_flags>())).flags as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_console_flags),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_console_flags>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_console_flags),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_console_flags>())).console_flags as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_console_flags),
            "::",
            stringify!(console_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_framebuffer {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub width: multiboot_uint32_t,
    pub height: multiboot_uint32_t,
    pub depth: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_header_tag_framebuffer() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_header_tag_framebuffer>(),
        20usize,
        concat!("Size of: ", stringify!(multiboot_header_tag_framebuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_header_tag_framebuffer>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_header_tag_framebuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_framebuffer>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_framebuffer),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_framebuffer>())).flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_framebuffer),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_framebuffer>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_framebuffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_framebuffer>())).width as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_framebuffer),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_framebuffer>())).height as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_framebuffer),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_framebuffer>())).depth as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_framebuffer),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_module_align {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_header_tag_module_align() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_header_tag_module_align>(),
        8usize,
        concat!("Size of: ", stringify!(multiboot_header_tag_module_align))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_header_tag_module_align>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_header_tag_module_align)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_module_align>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_module_align),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_module_align>())).flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_module_align),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_module_align>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_module_align),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_relocatable {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub min_addr: multiboot_uint32_t,
    pub max_addr: multiboot_uint32_t,
    pub align: multiboot_uint32_t,
    pub preference: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_header_tag_relocatable() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_header_tag_relocatable>(),
        24usize,
        concat!("Size of: ", stringify!(multiboot_header_tag_relocatable))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_header_tag_relocatable>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_header_tag_relocatable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_relocatable>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_relocatable),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_relocatable>())).flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_relocatable),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_relocatable>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_relocatable),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_relocatable>())).min_addr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_relocatable),
            "::",
            stringify!(min_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_relocatable>())).max_addr as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_relocatable),
            "::",
            stringify!(max_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_relocatable>())).align as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_relocatable),
            "::",
            stringify!(align)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_header_tag_relocatable>())).preference as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header_tag_relocatable),
            "::",
            stringify!(preference)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_color {
    pub red: multiboot_uint8_t,
    pub green: multiboot_uint8_t,
    pub blue: multiboot_uint8_t,
}
#[test]
fn bindgen_test_layout_multiboot_color() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_color>(),
        3usize,
        concat!("Size of: ", stringify!(multiboot_color))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_color>(),
        1usize,
        concat!("Alignment of ", stringify!(multiboot_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_color>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_color),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_color>())).green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_color),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_color>())).blue as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_color),
            "::",
            stringify!(blue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_mmap_entry {
    pub addr: multiboot_uint64_t,
    pub len: multiboot_uint64_t,
    pub type_: multiboot_uint32_t,
    pub zero: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_mmap_entry() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_mmap_entry>(),
        24usize,
        concat!("Size of: ", stringify!(multiboot_mmap_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_mmap_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(multiboot_mmap_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_mmap_entry>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mmap_entry),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_mmap_entry>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mmap_entry),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_mmap_entry>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mmap_entry),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_mmap_entry>())).zero as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mmap_entry),
            "::",
            stringify!(zero)
        )
    );
}
pub type multiboot_memory_map_t = multiboot_mmap_entry;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_tag() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag>(),
        8usize,
        concat!("Size of: ", stringify!(multiboot_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_string {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub string: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_multiboot_tag_string() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_string>(),
        8usize,
        concat!("Size of: ", stringify!(multiboot_tag_string))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_string>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_string))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_string>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_string),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_string>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_string),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_string>())).string as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_string),
            "::",
            stringify!(string)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_module {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub mod_start: multiboot_uint32_t,
    pub mod_end: multiboot_uint32_t,
    pub cmdline: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_multiboot_tag_module() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_module>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_tag_module))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_module>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_module))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_module>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_module),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_module>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_module),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_module>())).mod_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_module),
            "::",
            stringify!(mod_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_module>())).mod_end as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_module),
            "::",
            stringify!(mod_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_module>())).cmdline as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_module),
            "::",
            stringify!(cmdline)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_basic_meminfo {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub mem_lower: multiboot_uint32_t,
    pub mem_upper: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_tag_basic_meminfo() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_basic_meminfo>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_tag_basic_meminfo))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_basic_meminfo>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_basic_meminfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_basic_meminfo>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_basic_meminfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_basic_meminfo>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_basic_meminfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_basic_meminfo>())).mem_lower as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_basic_meminfo),
            "::",
            stringify!(mem_lower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_basic_meminfo>())).mem_upper as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_basic_meminfo),
            "::",
            stringify!(mem_upper)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_bootdev {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub biosdev: multiboot_uint32_t,
    pub slice: multiboot_uint32_t,
    pub part: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_tag_bootdev() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_bootdev>(),
        20usize,
        concat!("Size of: ", stringify!(multiboot_tag_bootdev))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_bootdev>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_bootdev))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_bootdev>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_bootdev),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_bootdev>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_bootdev),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_bootdev>())).biosdev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_bootdev),
            "::",
            stringify!(biosdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_bootdev>())).slice as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_bootdev),
            "::",
            stringify!(slice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_bootdev>())).part as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_bootdev),
            "::",
            stringify!(part)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_mmap {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub entry_size: multiboot_uint32_t,
    pub entry_version: multiboot_uint32_t,
    //pub entries: __IncompleteArrayField<multiboot_mmap_entry>,
}
#[test]
fn bindgen_test_layout_multiboot_tag_mmap() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_mmap>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_tag_mmap))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_mmap>(),
        8usize,
        concat!("Alignment of ", stringify!(multiboot_tag_mmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_mmap>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_mmap),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_mmap>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_mmap),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_mmap>())).entry_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_mmap),
            "::",
            stringify!(entry_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_mmap>())).entry_version as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_mmap),
            "::",
            stringify!(entry_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_mmap>())).entries as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_mmap),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct multiboot_vbe_info_block {
    pub external_specification: [multiboot_uint8_t; 512usize],
}
#[test]
fn bindgen_test_layout_multiboot_vbe_info_block() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_vbe_info_block>(),
        512usize,
        concat!("Size of: ", stringify!(multiboot_vbe_info_block))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_vbe_info_block>(),
        1usize,
        concat!("Alignment of ", stringify!(multiboot_vbe_info_block))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_vbe_info_block>())).external_specification as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_vbe_info_block),
            "::",
            stringify!(external_specification)
        )
    );
}
impl Default for multiboot_vbe_info_block {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct multiboot_vbe_mode_info_block {
    pub external_specification: [multiboot_uint8_t; 256usize],
}
#[test]
fn bindgen_test_layout_multiboot_vbe_mode_info_block() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_vbe_mode_info_block>(),
        256usize,
        concat!("Size of: ", stringify!(multiboot_vbe_mode_info_block))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_vbe_mode_info_block>(),
        1usize,
        concat!("Alignment of ", stringify!(multiboot_vbe_mode_info_block))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_vbe_mode_info_block>())).external_specification
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_vbe_mode_info_block),
            "::",
            stringify!(external_specification)
        )
    );
}
impl Default for multiboot_vbe_mode_info_block {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct multiboot_tag_vbe {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub vbe_mode: multiboot_uint16_t,
    pub vbe_interface_seg: multiboot_uint16_t,
    pub vbe_interface_off: multiboot_uint16_t,
    pub vbe_interface_len: multiboot_uint16_t,
    pub vbe_control_info: multiboot_vbe_info_block,
    pub vbe_mode_info: multiboot_vbe_mode_info_block,
}
#[test]
fn bindgen_test_layout_multiboot_tag_vbe() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_vbe>(),
        784usize,
        concat!("Size of: ", stringify!(multiboot_tag_vbe))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_vbe>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_vbe))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_vbe>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_vbe),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_vbe>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_vbe),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_vbe>())).vbe_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_vbe),
            "::",
            stringify!(vbe_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_vbe>())).vbe_interface_seg as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_vbe),
            "::",
            stringify!(vbe_interface_seg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_vbe>())).vbe_interface_off as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_vbe),
            "::",
            stringify!(vbe_interface_off)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_vbe>())).vbe_interface_len as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_vbe),
            "::",
            stringify!(vbe_interface_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_vbe>())).vbe_control_info as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_vbe),
            "::",
            stringify!(vbe_control_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_vbe>())).vbe_mode_info as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_vbe),
            "::",
            stringify!(vbe_mode_info)
        )
    );
}
impl Default for multiboot_tag_vbe {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_framebuffer_common {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub framebuffer_addr: multiboot_uint64_t,
    pub framebuffer_pitch: multiboot_uint32_t,
    pub framebuffer_width: multiboot_uint32_t,
    pub framebuffer_height: multiboot_uint32_t,
    pub framebuffer_bpp: multiboot_uint8_t,
    pub framebuffer_type: multiboot_uint8_t,
    pub reserved: multiboot_uint16_t,
}
#[test]
fn bindgen_test_layout_multiboot_tag_framebuffer_common() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_framebuffer_common>(),
        32usize,
        concat!("Size of: ", stringify!(multiboot_tag_framebuffer_common))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_framebuffer_common>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_tag_framebuffer_common)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer_common>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer_common),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer_common>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer_common),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer_common>())).framebuffer_addr
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer_common),
            "::",
            stringify!(framebuffer_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer_common>())).framebuffer_pitch
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer_common),
            "::",
            stringify!(framebuffer_pitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer_common>())).framebuffer_width
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer_common),
            "::",
            stringify!(framebuffer_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer_common>())).framebuffer_height
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer_common),
            "::",
            stringify!(framebuffer_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer_common>())).framebuffer_bpp as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer_common),
            "::",
            stringify!(framebuffer_bpp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer_common>())).framebuffer_type
                as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer_common),
            "::",
            stringify!(framebuffer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer_common>())).reserved as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer_common),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
pub struct multiboot_tag_framebuffer {
    pub common: multiboot_tag_framebuffer_common,
    pub __bindgen_anon_1: multiboot_tag_framebuffer__bindgen_ty_1,
}
#[repr(C)]
pub struct multiboot_tag_framebuffer__bindgen_ty_1 {
    pub __bindgen_anon_1:
        __BindgenUnionField<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1>,
    pub __bindgen_anon_2:
        __BindgenUnionField<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2>,
    pub bindgen_union_field: [u16; 3usize],
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1 {
    pub framebuffer_palette_num_colors: multiboot_uint16_t,
    pub framebuffer_palette: __IncompleteArrayField<multiboot_color>,
}
#[test]
fn bindgen_test_layout_multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1>()))
                .framebuffer_palette_num_colors as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(framebuffer_palette_num_colors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1>()))
                .framebuffer_palette as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(framebuffer_palette)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2 {
    pub framebuffer_red_field_position: multiboot_uint8_t,
    pub framebuffer_red_mask_size: multiboot_uint8_t,
    pub framebuffer_green_field_position: multiboot_uint8_t,
    pub framebuffer_green_mask_size: multiboot_uint8_t,
    pub framebuffer_blue_field_position: multiboot_uint8_t,
    pub framebuffer_blue_mask_size: multiboot_uint8_t,
}
#[test]
fn bindgen_test_layout_multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2>()))
                .framebuffer_red_field_position as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(framebuffer_red_field_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2>()))
                .framebuffer_red_mask_size as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(framebuffer_red_mask_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2>()))
                .framebuffer_green_field_position as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(framebuffer_green_field_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2>()))
                .framebuffer_green_mask_size as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(framebuffer_green_mask_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2>()))
                .framebuffer_blue_field_position as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(framebuffer_blue_field_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2>()))
                .framebuffer_blue_mask_size as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(framebuffer_blue_mask_size)
        )
    );
}
#[test]
fn bindgen_test_layout_multiboot_tag_framebuffer__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_framebuffer__bindgen_ty_1>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_framebuffer__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_tag_framebuffer__bindgen_ty_1)
        )
    );
}
impl Default for multiboot_tag_framebuffer__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_multiboot_tag_framebuffer() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_framebuffer>(),
        40usize,
        concat!("Size of: ", stringify!(multiboot_tag_framebuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_framebuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(multiboot_tag_framebuffer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_framebuffer>())).common as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_framebuffer),
            "::",
            stringify!(common)
        )
    );
}
impl Default for multiboot_tag_framebuffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_elf_sections {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub num: multiboot_uint32_t,
    pub entsize: multiboot_uint32_t,
    pub shndx: multiboot_uint32_t,
    pub sections: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_multiboot_tag_elf_sections() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_elf_sections>(),
        20usize,
        concat!("Size of: ", stringify!(multiboot_tag_elf_sections))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_elf_sections>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_elf_sections))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_elf_sections>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_elf_sections),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_elf_sections>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_elf_sections),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_elf_sections>())).num as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_elf_sections),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_elf_sections>())).entsize as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_elf_sections),
            "::",
            stringify!(entsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_elf_sections>())).shndx as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_elf_sections),
            "::",
            stringify!(shndx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_elf_sections>())).sections as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_elf_sections),
            "::",
            stringify!(sections)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_apm {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub version: multiboot_uint16_t,
    pub cseg: multiboot_uint16_t,
    pub offset: multiboot_uint32_t,
    pub cseg_16: multiboot_uint16_t,
    pub dseg: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub cseg_len: multiboot_uint16_t,
    pub cseg_16_len: multiboot_uint16_t,
    pub dseg_len: multiboot_uint16_t,
}
#[test]
fn bindgen_test_layout_multiboot_tag_apm() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_apm>(),
        28usize,
        concat!("Size of: ", stringify!(multiboot_tag_apm))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_apm>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_apm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_apm>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_apm),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_apm>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_apm),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_apm>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_apm),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_apm>())).cseg as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_apm),
            "::",
            stringify!(cseg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_apm>())).offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_apm),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_apm>())).cseg_16 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_apm),
            "::",
            stringify!(cseg_16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_apm>())).dseg as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_apm),
            "::",
            stringify!(dseg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_apm>())).flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_apm),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_apm>())).cseg_len as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_apm),
            "::",
            stringify!(cseg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_apm>())).cseg_16_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_apm),
            "::",
            stringify!(cseg_16_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_apm>())).dseg_len as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_apm),
            "::",
            stringify!(dseg_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_efi32 {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub pointer: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_tag_efi32() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_efi32>(),
        12usize,
        concat!("Size of: ", stringify!(multiboot_tag_efi32))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_efi32>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_efi32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi32>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi32),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi32>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi32),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi32>())).pointer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi32),
            "::",
            stringify!(pointer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_efi64 {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub pointer: multiboot_uint64_t,
}
#[test]
fn bindgen_test_layout_multiboot_tag_efi64() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_efi64>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_tag_efi64))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_efi64>(),
        8usize,
        concat!("Alignment of ", stringify!(multiboot_tag_efi64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi64>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi64),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi64>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi64),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi64>())).pointer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi64),
            "::",
            stringify!(pointer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_smbios {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub major: multiboot_uint8_t,
    pub minor: multiboot_uint8_t,
    pub reserved: [multiboot_uint8_t; 6usize],
    pub tables: __IncompleteArrayField<multiboot_uint8_t>,
}
#[test]
fn bindgen_test_layout_multiboot_tag_smbios() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_smbios>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_tag_smbios))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_smbios>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_smbios))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_smbios>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_smbios),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_smbios>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_smbios),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_smbios>())).major as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_smbios),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_smbios>())).minor as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_smbios),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_smbios>())).reserved as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_smbios),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_smbios>())).tables as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_smbios),
            "::",
            stringify!(tables)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_old_acpi {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub rsdp: __IncompleteArrayField<multiboot_uint8_t>,
}
#[test]
fn bindgen_test_layout_multiboot_tag_old_acpi() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_old_acpi>(),
        8usize,
        concat!("Size of: ", stringify!(multiboot_tag_old_acpi))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_old_acpi>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_old_acpi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_old_acpi>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_old_acpi),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_old_acpi>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_old_acpi),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_old_acpi>())).rsdp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_old_acpi),
            "::",
            stringify!(rsdp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_new_acpi {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub rsdp: __IncompleteArrayField<multiboot_uint8_t>,
}
#[test]
fn bindgen_test_layout_multiboot_tag_new_acpi() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_new_acpi>(),
        8usize,
        concat!("Size of: ", stringify!(multiboot_tag_new_acpi))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_new_acpi>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_new_acpi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_new_acpi>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_new_acpi),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_new_acpi>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_new_acpi),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_new_acpi>())).rsdp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_new_acpi),
            "::",
            stringify!(rsdp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_network {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub dhcpack: __IncompleteArrayField<multiboot_uint8_t>,
}
#[test]
fn bindgen_test_layout_multiboot_tag_network() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_network>(),
        8usize,
        concat!("Size of: ", stringify!(multiboot_tag_network))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_network>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_network))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_network>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_network),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_network>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_network),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_network>())).dhcpack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_network),
            "::",
            stringify!(dhcpack)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_efi_mmap {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub descr_size: multiboot_uint32_t,
    pub descr_vers: multiboot_uint32_t,
    pub efi_mmap: __IncompleteArrayField<multiboot_uint8_t>,
}
#[test]
fn bindgen_test_layout_multiboot_tag_efi_mmap() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_efi_mmap>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_tag_efi_mmap))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_efi_mmap>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_efi_mmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi_mmap>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi_mmap),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi_mmap>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi_mmap),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_efi_mmap>())).descr_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi_mmap),
            "::",
            stringify!(descr_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_efi_mmap>())).descr_vers as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi_mmap),
            "::",
            stringify!(descr_vers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi_mmap>())).efi_mmap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi_mmap),
            "::",
            stringify!(efi_mmap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_efi32_ih {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub pointer: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_tag_efi32_ih() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_efi32_ih>(),
        12usize,
        concat!("Size of: ", stringify!(multiboot_tag_efi32_ih))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_efi32_ih>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_efi32_ih))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi32_ih>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi32_ih),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi32_ih>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi32_ih),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi32_ih>())).pointer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi32_ih),
            "::",
            stringify!(pointer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_efi64_ih {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub pointer: multiboot_uint64_t,
}
#[test]
fn bindgen_test_layout_multiboot_tag_efi64_ih() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_efi64_ih>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_tag_efi64_ih))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_efi64_ih>(),
        8usize,
        concat!("Alignment of ", stringify!(multiboot_tag_efi64_ih))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi64_ih>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi64_ih),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi64_ih>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi64_ih),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multiboot_tag_efi64_ih>())).pointer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_efi64_ih),
            "::",
            stringify!(pointer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_load_base_addr {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub load_base_addr: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_tag_load_base_addr() {
    assert_eq!(
        ::std::mem::size_of::<multiboot_tag_load_base_addr>(),
        12usize,
        concat!("Size of: ", stringify!(multiboot_tag_load_base_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<multiboot_tag_load_base_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_tag_load_base_addr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_load_base_addr>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_load_base_addr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_load_base_addr>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_load_base_addr),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<multiboot_tag_load_base_addr>())).load_base_addr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_tag_load_base_addr),
            "::",
            stringify!(load_base_addr)
        )
    );
}
